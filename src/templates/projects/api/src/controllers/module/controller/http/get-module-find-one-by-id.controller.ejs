import {
  Controller,
  Get,
  HttpException,
  HttpStatus,
  Param,
} from '@nestjs/common';
import {
  ApiInternalServerErrorResponse,
  ApiNotFoundResponse,
  ApiOkResponse,
  ApiParam,
  ApiTags,
} from '@nestjs/swagger';
import { InvalidArgumentError } from '@shared/common/domain/value-object';
import { <%= modelNameUpperCamelCase %>FindByOneIdService } from '@shared/entities/<%= modelNameSnakeCase %>/application/<%= modelNameSnakeCase %>-find-by-id.service';
import { <%= modelNameUpperCamelCase %>NotExist } from '@shared/entities/<%= modelNameSnakeCase %>/domain/exceptions/<%= modelNameSnakeCase %>-not-exist';
import { <%= modelNameUpperSnakeCase %>_ERROR_MAPPER, <%= modelNameUpperCamelCase %>ApiResponse } from '../<%= modelNameSnakeCase %>.dto';

@ApiTags('<%= modelNameSnakeCase %>')
@Controller('<%= modelNameSnakeCase %>')
export class Get<%= modelNameUpperCamelCase %>FindOneById {
  constructor(
    private readonly <%= modelNameCamelCase %>FindByOneIdService: <%= modelNameUpperCamelCase %>FindByOneIdService,
  ) {}

  @Get(':id')
  @ApiParam({
    name: 'id',
    type: String,
    description: 'id',
  })
  @ApiOkResponse({
    description: 'get a <%= modelNameSnakeCase %>',
    type: <%= modelNameUpperCamelCase %>ApiResponse,
    status: 200,
  })
  @ApiNotFoundResponse({
    description: <%= modelNameUpperSnakeCase %>_ERROR_MAPPER.NOT_FOUND,
    schema: {
      type: 'object',
      example: {
        data: undefined,
        error: <%= modelNameUpperSnakeCase %>_ERROR_MAPPER.NOT_FOUND,
      },
    },
  })
  @ApiInternalServerErrorResponse({
    description: <%= modelNameUpperSnakeCase %>_ERROR_MAPPER.INTERNAL_SERVER_ERROR,
    schema: {
      type: 'object',
      example: {
        data: undefined,
        error: <%= modelNameUpperSnakeCase %>_ERROR_MAPPER.INTERNAL_SERVER_ERROR,
      },
    },
  })
  public async findOneById(@Param('id') id: string): Promise<<%= modelNameUpperCamelCase %>ApiResponse> {
    try {
      const <%= modelNameSnakeCase %> = await this.<%= modelNameCamelCase %>FindByOneIdService.run(id);

      return {
        data: <%= modelNameSnakeCase %>.toPrimitive(),
      };
    } catch (error) {
      if (error instanceof InvalidArgumentError) {
        throw new HttpException(error.message, HttpStatus.UNPROCESSABLE_ENTITY);
      }

      if (error instanceof <%= modelNameUpperCamelCase %>NotExist) {
        throw new HttpException(error.message, HttpStatus.NOT_FOUND);
      }

      throw new HttpException(
        <%= modelNameUpperSnakeCase %>_ERROR_MAPPER.INTERNAL_SERVER_ERROR,
        HttpStatus.INTERNAL_SERVER_ERROR,
      );
    }
  }
}
