import { InjectRepository } from '@nestjs/typeorm';
import { Nulleable } from '@shared/common/domain/base-entity';
import { Repository } from 'typeorm';
import { <%= modelNameUpperCamelCase%> } from '../domain/<%= modelNameSnakeCase %>';
import { <%= modelNameUpperCamelCase%>Repository } from '../domain/<%= modelNameSnakeCase %>.repository';
import { <%= modelNameUpperCamelCase%>Id } from '../domain/value-object';
import { <%= modelNameUpperCamelCase%>Entity } from './model/<%= modelNameSnakeCase %>-entity-typeorm.entity';

export class <%= modelNameUpperCamelCase%>RepositoryInTypeOrm implements <%= modelNameUpperCamelCase%>Repository {
  constructor(
    @InjectRepository(<%= modelNameUpperCamelCase%>Entity)
    private repository: Repository<<%= modelNameUpperCamelCase%>Entity>,
  ) {}

  <% if (create) { %>
  public async save(<%= modelNameCamelCase %>: <%= modelNameUpperCamelCase%>): Promise<void> {
    const model = this.repository.create(<%= modelNameCamelCase %>.toPrimitive());
    await this.repository.save(model);
  }
  <% } %>
  <% if (findOne) { %>
  public async findOneById(<%= modelNameCamelCase %>Id: <%= modelNameUpperCamelCase%>Id): Promise<Nulleable<<%= modelNameUpperCamelCase%>>> {
    const <%= modelNameCamelCase %>Entity = await this.repository.findOne({
      where: { id: <%= modelNameCamelCase %>Id.value },
    });

    if (!<%= modelNameCamelCase %>Entity) {
      return undefined;
    }

    return this.convertEntityToValueObject(<%= modelNameCamelCase %>Entity);
  }
  <% } %>

  <% if (findAll) { %>
  public async findAll(): Promise<<%= modelNameUpperCamelCase%>[]> {
    const <%= modelNameCamelCase %>Entities = await this.repository.find();

    return <%= modelNameCamelCase %>Entities.map((<%= modelNameCamelCase %>Entity)=> this.convertEntityToValueObject(<%= modelNameCamelCase %>Entity));
  }
  <% } %>

  <% if (update) { %>
  public async update(<%= modelNameCamelCase %>: <%= modelNameUpperCamelCase%>): Promise<void> {
    const model = this.repository.create(<%= modelNameCamelCase %>.toPrimitive());
    await this.repository.save(model);
  }
  <% } %>

  <% if (deleted) { %>
  public async delete(<%= modelNameCamelCase %>: <%= modelNameUpperCamelCase%>): Promise<void> {
    const model = this.repository.create(<%= modelNameCamelCase %>.toPrimitive());
    await this.repository.softRemove(model);
  }
  <% } %>

  private convertEntityToValueObject(<%= modelNameCamelCase %>Entity: <%= modelNameUpperCamelCase%>Entity): <%= modelNameUpperCamelCase%> {
    return <%= modelNameUpperCamelCase%>.fromEntity(
      <%= modelNameCamelCase %>Entity.id,
    );
  }
}
